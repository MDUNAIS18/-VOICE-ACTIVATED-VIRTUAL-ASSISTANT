import speech_recognition as sr
import pyttsx3
import webbrowser
import musiclibrary
import openai
import gtts
import pygame
import os  # To remove temporary files after use

recognizer = sr.Recognizer()  
engine = pyttsx3.init()

def speak_old(text):
    engine.say(text)
    engine.runAndWait()

def speak(text):
    tts = gtts.gTTS(text)
    tts.save('temp.mp3')  # Save speech as an MP3 file

    # Initialize Pygame mixer
    pygame.mixer.init()

    # Load and play the MP3 file generated by gTTS
    pygame.mixer.music.load("temp.mp3")  # Load the saved MP3 file
    pygame.mixer.music.play()  # Play the music

    # Wait until the music finishes playing
    while pygame.mixer.music.get_busy():  
        pygame.time.Clock().tick(10)  # Keep the program running while music is playing

    # Remove the temporary MP3 file after it is played
    pygame.mixer.music.unload() 
    os.remove("temp.mp3")

def aiProcess(command):
    openai.api_key = # Set your OpenAI API key here

    # OpenAI chat completion
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  
        messages=[
            {"role": "system", "content": "You are a helpful assistant and google cloud. Please give short responses."},
            {"role": "user", "content": command}
        ]
    )

    return response.choices[0].message['content']  # Correct response access

def processCommand(c):
    if "open google" in c.lower():
        webbrowser.open("https://google.com")
    elif "open youtube" in c.lower():
        webbrowser.open("https://youtube.com")
    elif "open linkedin" in c.lower():
        webbrowser.open("https://linkedin.com")
    elif c.lower().startswith("play"):  
        song = c.lower().split(" ")[1]
        link = musiclibrary.music.get(song)  
        if link:
            webbrowser.open(link)
        else:
            speak("Sorry, I could not find that song.")
    else:
        output = aiProcess(c)
        speak(output)

if __name__ == "__main__":
    speak("Initializing Jarvis... ")
    while True:
        # Listen for the wake word "jarvis"
        r = sr.Recognizer()

        # Recognize speech using Google
        print("recognizing...")
        try:
            with sr.Microphone() as source:
                print("listening...")
                audio = r.listen(source, timeout=2, phrase_time_limit=1)
            word = r.recognize_google(audio)
            if word.lower() == "jarvis":
                speak("Yes")
                # Listen for command
                with sr.Microphone() as source:
                    print("listening...")
                    audio = r.listen(source)
                command = r.recognize_google(audio)

                processCommand(command)

        except Exception as e:
            print("error: {0}".format(e))
